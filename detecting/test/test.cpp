//
// Created by d3vyatk4 on 16.11.2021.
//

#include "Exception.h"
#include "detecting.h"
#include "gtest/gtest.h"

#include <opencv2/opencv.hpp>
#include <vector>

#define MODEL "/home/runner/work/BroBand/BroBand/detecting/model/annotation_resnet34_porn_model.pt"
#define TEST_IMAGE ""


TEST(IMAGE_PORN_DETECTOR, successeful_set_threshold) {

    // создаем объект
    PornImageDetector img_detector;

    // устанавливаем порог
    EXPECT_EQ(img_detector.set_threshold(0.7), 0);
}

TEST(IMAGE_PORN_DETECTOR, bad_set_threshold) {

    // создаем объект
    PornImageDetector img_detector;

    // устанавливаем порог
    EXPECT_THROW(img_detector.set_threshold(2), std::logic_error);
}

TEST(IMAGE_PORN_DETECTOR, successeful_load_model) {

    // создаем объект
    PornImageDetector img_detector;

    // загружаем модель
    EXPECT_EQ(img_detector.load_model(MODEL),
              0
    );
}

TEST(IMAGE_PORN_DETECTOR, bad_load_model) {

    PornImageDetector img_detector;

    EXPECT_EQ(img_detector.load_model(""), 1);
}

TEST(IMAGE_PORN_DETECTOR, successeful_load_image) {

    // создаем объект
    PornImageDetector img_detector;

    // читаем изображение
    EXPECT_NO_THROW({
                        cv::Mat img = img_detector.load_img(TEST_IMAGE);
                    });
}

TEST(IMAGE_PORN_DETECTOR, bad_load_image) {

    // создаем объект
    PornImageDetector img_detector;

    // читаем изображение
    EXPECT_THROW(cv::Mat img = img_detector.load_img(""),
                 cv::Exception
    );
}

TEST(IMAGE_PORN_DETECTOR, successeful_permutation_channels) {

    PornImageDetector img_detector;
    cv::Mat img = img_detector.load_img(TEST_IMAGE);

    EXPECT_NO_THROW({
                        img_detector.permutation_channels(img);
                    });
}

TEST(IMAGE_PORN_DETECTOR, bad_permutation_channels) {

    PornImageDetector img_detector;

    // объект с 2-мя каналами
    cv::Mat img(2, 2, CV_8UC2, cv::Scalar(0, 0, 255));

    EXPECT_THROW(img_detector.permutation_channels(img), std::runtime_error);
}


TEST(IMAGE_PORN_DETECTOR, full_way) {

    // создаем объект
    PornImageDetector img_detector;

    // загружаем модель
    auto err = img_detector.load_model(MODEL);

    EXPECT_EQ(err, 0);

    // читаем изображение
    cv::Mat img = img_detector.load_img(TEST_IMAGE);

    // предобработка
    torch::Tensor img_tensor = img_detector.preproccesing(img);

    // прогоняем по сетке изображение
    Probability probability = img_detector.forward(img_tensor);

    EXPECT_GT(probability.porn, 0.5);

    // блюрим при необходимости
    img_detector.blurring();
}

TEST(MESSAGE_PORN_DETECTOR, preproccessing) {

    PornTextDetector txt_detector;

    std::string msg = "сок и виски под окном";
    std::string res = txt_detector.preproccesing(msg);
    std::cout << res << "+++++++++++++++++++++++++++++\n";
    EXPECT_TRUE(res != "сок и виски под окном");
}

TEST(MESSAGE_PORN_DETECTOR, text_replace) {

    PornTextDetector txt_detector;

    std::string msg = "порно смотреть онлайн";

    std::string res = txt_detector.text_replace(msg);
    std::cout << res << "\n";
    EXPECT_TRUE(res == "***** ******** ******");
}

TEST(MESSAGE_PORN_DETECTOR, forward) {

    PornTextDetector txt_detector;

    std::string msg = "порно смотреть онлайн";
    std::string res = txt_detector.preproccesing(msg);
    auto probability = txt_detector.forward(res);
    EXPECT_GT(probability.porn, 0.5);
    txt_detector.text_replace(msg);
}

int main(int argc, char *argv[]) {

    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
